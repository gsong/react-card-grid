{"version":3,"sources":["example-app/examples/GridAll.js"],"names":["GridAll","useCalculateLayout","columnGap","maxItemWidth","minItemWidth","containerWidth","rowCount","containerRef","React","useState","cards","setCards","useEffect","fetch","then","response","json","itemWidth","calculateItemWidthWithCount","itemCount","length","Container","rowGap","css","padding","width","ref","map","card","Item","itemStyle","key","id"],"mappings":"mRAoBe,SAASA,IAAW,IAAD,EACmBC,YAAmB,CACpEC,UAPc,GAQdC,aAPiB,IAQjBC,aAPiB,MAIXC,EADwB,EACxBA,eAAgBC,EADQ,EACRA,SAAUC,EADF,EACEA,aADF,EAONC,IAAMC,SAAS,IAPT,mBAOzBC,EAPyB,KAOlBC,EAPkB,KAQhCH,IAAMI,WAAU,WACdC,MAAM,eACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,gBAAGJ,EAAH,EAAGA,MAAH,OAAeC,EAASD,QAC/B,IAEH,IAAMO,EAAYC,YAA4B,CAC5ChB,UApBc,GAqBdG,iBACAc,UAAWT,EAAMU,OACjBjB,aAtBiB,IAuBjBG,aAGF,OACE,YAAC,IAAKe,UAAN,cACM,CAAEJ,YAAWf,UA7BL,GA6BgBoB,OA1BnB,IAyBX,CAEEC,IAAK,CAAEC,QAAS,EAAGC,MAAO,OAC1BC,IAAKnB,IAEJG,EAAMiB,KAAI,SAACC,GAAD,OACT,YAAC,IAAKC,KAAN,CAAWN,IAAKO,IAAWC,IAAKH,EAAKI,IACnC,YAAC,IAAD,iBAAiBJ,EAAU,CAAEX","file":"static/js/5.90c4af2f.chunk.js","sourcesContent":["//@flow strict\n/** @jsx jsx */\nimport React from \"react\";\nimport {\n  Grid,\n  calculateItemWidthWithCount,\n  useCalculateLayout,\n} from \"react-listitem-grid\";\nimport { jsx } from \"@emotion/core\";\n\nimport CardContent from \"../components/CardContent\";\nimport { itemStyle } from \"../styles\";\n\nimport \"react-listitem-grid/Grid/styles.css\";\n\nconst columnGap = 16;\nconst maxItemWidth = 350;\nconst minItemWidth = 150;\nconst rowGap = 16;\n\nexport default function GridAll() {\n  const { containerWidth, rowCount, containerRef } = useCalculateLayout({\n    columnGap,\n    maxItemWidth,\n    minItemWidth,\n  });\n\n  const [cards, setCards] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"/api/cards/\")\n      .then((response) => response.json())\n      .then(({ cards }) => setCards(cards));\n  }, []);\n\n  const itemWidth = calculateItemWidthWithCount({\n    columnGap,\n    containerWidth,\n    itemCount: cards.length,\n    maxItemWidth,\n    rowCount,\n  });\n\n  return (\n    <Grid.Container\n      {...{ itemWidth, columnGap, rowGap }}\n      css={{ padding: 8, width: \"70%\" }}\n      ref={containerRef}\n    >\n      {cards.map((card) => (\n        <Grid.Item css={itemStyle} key={card.id}>\n          <CardContent {...card} {...{ itemWidth }} />\n        </Grid.Item>\n      ))}\n    </Grid.Container>\n  );\n}\n"],"sourceRoot":""}