{"version":3,"sources":["example-app/components/CardContent.js","example-app/styles.js","example-app/examples/GridAll.js"],"names":["Content","styled","div","display","flexDirection","flexGrow","cursor","titleStyle","textAlign","width","Title","h2","fontSize","lineHeight","marginBottom","overflow","WebkitBoxOrient","WebkitLineClamp","ActionBar","alignItems","justifyContent","LinkButton","button","backgroundColor","border","color","fontWeight","letterSpacing","padding","textShadow","useClickableContent","down","link","React","useRef","onMouseDown","Date","now","onMouseUp","current","click","CardContent","contentType","handleMore","image","itemWidth","subTitle","title","url","linkRef","clickProps","Fragment","css","order","margin","paddingTop","ref","href","textDecoration","src","alt","height","objectFit","aria-hidden","onClick","aria-label","itemStyle","borderRadius","listStyleType","boxShadow","GridAll","useCalculateLayout","columnGap","maxItemWidth","minItemWidth","containerWidth","rowCount","containerRef","useState","cards","setCards","useEffect","fetch","then","response","json","calculateItemWidthWithCount","itemCount","length","Container","rowGap","map","card","Item","key","id"],"mappings":"4LAwEMA,EAAUC,IAAOC,IAAI,CACzBC,QAAS,OACTC,cAAe,SACfC,SAAU,EAEV,SAAU,CAAEC,OAAQ,aAGhBC,EAAa,CAAEC,UAAW,SAAUC,MAAO,QAE3CC,EAAQT,IAAOU,GAAG,CACtBJ,EACA,CACEK,SAAU,GACVC,WAAY,SACZC,aAAc,EAEdX,QAAS,cACTY,SAAU,SACVC,gBAAiB,WACjBC,gBAAiB,KAIfC,EAAYjB,IAAOC,IAAI,CAC3BiB,WAAY,WACZhB,QAAS,OACTiB,eAAgB,kBAGZC,EAAapB,IAAOqB,OAAO,CAC/BC,gBAAiB,cACjBC,OAAQ,OACRC,MAAO,kBACPC,WAAY,IACZC,cAAe,SACfC,QAAS,EAET,SAAU,CAAEtB,OAAQ,WAGpB,iBAAkB,CAChBmB,MAAO,SACPI,WAAY,oBAIHC,EAAsB,WACjC,IACIC,EADEC,EAAOC,IAAMC,SAYnB,MAAO,CAACF,EAAM,CAAEG,YATI,kBAAOJ,EAAOK,KAAKC,OASVC,UARX,WAChB,IACmB,EADHF,KAAKC,MAAQN,EACf,MAEZ,UAAAC,EAAKO,eAAL,SAAcC,aAOLC,IAtHK,SAAC,GAQP,IAPZC,EAOW,EAPXA,YACAC,EAMW,EANXA,WACAC,EAKW,EALXA,MACAC,EAIW,EAJXA,UACAC,EAGW,EAHXA,SACAC,EAEW,EAFXA,MACAC,EACW,EADXA,IACW,EACmBlB,IADnB,mBACJmB,EADI,KACKC,EADL,KAGX,OACE,YAAC,IAAMC,SAAP,KACE,YAACnD,EAAD,iBAAakD,EAAb,CAAyBE,IAAK,CAAEC,MAAO,KACrC,sBAAQD,IAAK,CAAEE,OAAQ,eAAgBD,MAAO,EAAGE,WAAY,IAC3D,YAAC7C,EAAD,KACE,iBAEE8C,IAAKP,EACLQ,KAAMT,EACNI,IAAK,CAAE3B,MAAO,kBAAmBiC,eAAgB,SAEhDX,IAGL,iBAAGK,IAAK7C,GAAauC,IAGvB,mBACEa,IAAKf,EAAMI,IACXY,IAAKhB,EAAMgB,IAAMhB,EAAMgB,IAAM,GAC7BR,IAAK,CACHS,OAA2B,GAAjBhB,EAAY,GAAU,GAChCiB,UAAW,QACXrD,MAAOoC,EAAY,MAKzB,YAAC3B,EAAD,KACE,mBAAK6C,eAAA,EAAYX,IAAK,CAAEE,OAAQ,IAC7BZ,GAEH,YAAC,IAAD,wBAAiCA,GACjC,YAACrB,EAAD,CACE2C,QAASrB,EACTsB,aAAA,2BAAgClB,IAFlC,0B,kCC5DR,kCAAO,IAAMmB,EAAY,CACvB/D,QAAS,OACTC,cAAe,SACfoB,OAAO,4BACP2C,aAAc,EACd1C,MAAO,kBACPb,SAAU,GACVwD,cAAe,OAEf,SAAU,CAAEC,UAAW,qB,kLCUV,SAASC,IAAW,IAAD,EACmBC,YAAmB,CACpEC,UAPc,GAQdC,aAPiB,IAQjBC,aAPiB,MAIXC,EADwB,EACxBA,eAAgBC,EADQ,EACRA,SAAUC,EADF,EACEA,aADF,EAON5C,IAAM6C,SAAS,IAPT,mBAOzBC,EAPyB,KAOlBC,EAPkB,KAQhC/C,IAAMgD,WAAU,WACdC,MAAM,eACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,gBAAGJ,EAAH,EAAGA,MAAH,OAAeC,EAASD,QAC/B,IAEH,IAAMlC,EAAYyC,YAA4B,CAC5Cd,UApBc,GAqBdG,iBACAY,UAAWR,EAAMS,OACjBf,aAtBiB,IAuBjBG,aAGF,OACE,YAAC,IAAKa,UAAN,cACM,CAAE5C,YAAW2B,UA7BL,GA6BgBkB,OA1BnB,IAyBX,CAEEtC,IAAK,CAAExB,QAAS,EAAGnB,MAAO,OAC1B+C,IAAKqB,IAEJE,EAAMY,KAAI,SAACC,GAAD,OACT,YAAC,IAAKC,KAAN,CAAWzC,IAAKc,IAAW4B,IAAKF,EAAKG,IACnC,YAAC,IAAD,iBAAiBH,EAAU,CAAE/C","file":"static/js/5.f3e73bf8.chunk.js","sourcesContent":["//@flow strict\n/** @jsx jsx */\nimport React from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport styled from \"@emotion/styled\";\nimport { jsx } from \"@emotion/core\";\n\ntype Props = {|\n  contentType: string,\n  handleMore: () => void,\n  image: { url: string, alt?: string },\n  itemWidth: number,\n  subTitle: string,\n  title: string,\n  url: string,\n|};\n\nconst CardContent = ({\n  contentType,\n  handleMore,\n  image,\n  itemWidth,\n  subTitle,\n  title,\n  url,\n}: Props) => {\n  const [linkRef, clickProps] = useClickableContent();\n\n  return (\n    <React.Fragment>\n      <Content {...clickProps} css={{ order: 1 }}>\n        <header css={{ margin: \"auto 6px 6px\", order: 1, paddingTop: 6 }}>\n          <Title>\n            <a\n              // $FlowFixMe\n              ref={linkRef}\n              href={url}\n              css={{ color: \"hsl(0, 0%, 25%)\", textDecoration: \"none\" }}\n            >\n              {title}\n            </a>\n          </Title>\n          <p css={titleStyle}>{subTitle}</p>\n        </header>\n\n        <img\n          src={image.url}\n          alt={image.alt ? image.alt : \"\"}\n          css={{\n            height: ((itemWidth - 2) * 9) / 16,\n            objectFit: \"cover\",\n            width: itemWidth - 2,\n          }}\n        />\n      </Content>\n\n      <ActionBar>\n        <div aria-hidden css={{ margin: 6 }}>\n          {contentType}\n        </div>\n        <VisuallyHidden>Content type is {contentType}</VisuallyHidden>\n        <LinkButton\n          onClick={handleMore}\n          aria-label={`More actions for ${title}`}\n        >\n          •••\n        </LinkButton>\n      </ActionBar>\n    </React.Fragment>\n  );\n};\n\nconst Content = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  flexGrow: 1,\n\n  \":hover\": { cursor: \"pointer\" },\n});\n\nconst titleStyle = { textAlign: \"center\", width: \"100%\" };\n\nconst Title = styled.h2([\n  titleStyle,\n  {\n    fontSize: 14,\n    lineHeight: \"1.35em\",\n    marginBottom: 6,\n\n    display: \"-webkit-box\",\n    overflow: \"hidden\",\n    WebkitBoxOrient: \"vertical\",\n    WebkitLineClamp: 2,\n  },\n]);\n\nconst ActionBar = styled.div({\n  alignItems: \"baseline\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n});\n\nconst LinkButton = styled.button({\n  backgroundColor: \"transparent\",\n  border: \"none\",\n  color: \"hsl(0, 0%, 40%)\",\n  fontWeight: 900,\n  letterSpacing: \"0.15em\",\n  padding: 6,\n\n  \":hover\": { cursor: \"pointer\" },\n\n  // stylelint-disable-next-line selector-list-comma-newline-after\n  \":hover, :focus\": {\n    color: \"orange\",\n    textShadow: \"0 0 5px orange\",\n  },\n});\n\nexport const useClickableContent = () => {\n  const link = React.useRef<HTMLElement | typeof undefined>();\n  let down;\n\n  const onMouseDown = () => (down = Date.now());\n  const onMouseUp = () => {\n    const elapsed = Date.now() - down;\n    if (elapsed < 200) {\n      // eslint-disable-next-line no-unused-expressions\n      link.current?.click();\n    }\n  };\n\n  return [link, { onMouseDown, onMouseUp }];\n};\n\nexport default CardContent;\n","//@flow strict\nexport const itemStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  border: `1px solid hsl(0, 0%, 85%)`,\n  borderRadius: 8,\n  color: \"hsl(0, 0%, 40%)\",\n  fontSize: 12,\n  listStyleType: \"none\",\n\n  \":hover\": { boxShadow: \"0 0 10px orange\" },\n};\n","//@flow strict\n/** @jsx jsx */\nimport React from \"react\";\nimport {\n  Grid,\n  calculateItemWidthWithCount,\n  useCalculateLayout,\n} from \"react-listitem-grid\";\nimport { jsx } from \"@emotion/core\";\n\nimport CardContent from \"../components/CardContent\";\nimport { itemStyle } from \"../styles\";\n\nimport \"react-listitem-grid/Grid/styles.css\";\n\nconst columnGap = 16;\nconst maxItemWidth = 350;\nconst minItemWidth = 150;\nconst rowGap = 16;\n\nexport default function GridAll() {\n  const { containerWidth, rowCount, containerRef } = useCalculateLayout({\n    columnGap,\n    maxItemWidth,\n    minItemWidth,\n  });\n\n  const [cards, setCards] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"/api/cards/\")\n      .then((response) => response.json())\n      .then(({ cards }) => setCards(cards));\n  }, []);\n\n  const itemWidth = calculateItemWidthWithCount({\n    columnGap,\n    containerWidth,\n    itemCount: cards.length,\n    maxItemWidth,\n    rowCount,\n  });\n\n  return (\n    <Grid.Container\n      {...{ itemWidth, columnGap, rowGap }}\n      css={{ padding: 8, width: \"70%\" }}\n      ref={containerRef}\n    >\n      {cards.map((card) => (\n        <Grid.Item css={itemStyle} key={card.id}>\n          <CardContent {...card} {...{ itemWidth }} />\n        </Grid.Item>\n      ))}\n    </Grid.Container>\n  );\n}\n"],"sourceRoot":""}