{"version":3,"sources":["example-app/examples/FlexMaxRows.js"],"names":["FlexMaxRows","useCalculateLayout","columnGap","maxItemWidth","maxRows","minItemWidth","isFlex","containerWidth","rowCount","desiredItemCount","containerRef","React","useState","cards","setCards","useEffect","length","fetch","then","response","json","itemWidth","calculateItemWidthWithCount","itemCount","Container","rowGap","css","padding","width","ref","slice","map","card","Item","itemStyle","key","id"],"mappings":"mRAqBe,SAASA,IAAe,IAAD,EAMhCC,YAAmB,CACrBC,UAbc,GAcdC,aAbiB,IAcjBC,QAbY,EAcZC,aAbiB,IAcjBC,QAAQ,IATRC,EAFkC,EAElCA,eACAC,EAHkC,EAGlCA,SACAC,EAJkC,EAIlCA,iBACAC,EALkC,EAKlCA,aALkC,EAcVC,IAAMC,SAAS,IAdL,mBAc7BC,EAd6B,KActBC,EAdsB,KAepCH,IAAMI,WAAU,WACVN,GAAoBI,EAAMG,OAASP,GACrCQ,MAAM,qBAAD,OAAsBR,IACxBS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,gBAAGL,EAAH,EAAGA,MAAH,OAAeC,EAASD,QAEjC,CAACA,EAAMG,OAAQP,IAElB,IAAMY,EAAYC,YAA4B,CAC5CpB,UA9Bc,GA+BdK,iBACAgB,UAAWV,EAAMG,OACjBb,aAhCiB,IAiCjBK,aAGF,OACE,YAAC,IAAKgB,UAAN,cACM,CAAEtB,UAvCM,GAuCKuB,OAnCR,IAkCX,CAEEC,IAAK,CAAEC,QAAS,EAAGC,MAAO,OAC1BC,IAAKnB,IAEJG,EAAMiB,MAAM,EAAGrB,GAAkBsB,KAAI,SAACC,GAAD,OACpC,YAAC,IAAKC,KAAN,cACM,CAAEZ,YAAWnB,UA7CT,GA6CoBuB,OAzCvB,IAwCP,CAEEC,IAAKQ,IACLC,IAAKH,EAAKI,KAEV,YAAC,IAAD,iBAAiBJ,EAAU,CAAEX","file":"static/js/3.e5d16306.chunk.js","sourcesContent":["//@flow strict\n/** @jsx jsx */\nimport React from \"react\";\nimport {\n  Flex,\n  calculateItemWidthWithCount,\n  useCalculateLayout,\n} from \"react-listitem-grid\";\nimport { jsx } from \"@emotion/core\";\n\nimport CardContent from \"../components/CardContent\";\nimport { itemStyle } from \"../styles\";\n\nimport \"react-listitem-grid/Flex/styles.css\";\n\nconst columnGap = 16;\nconst maxItemWidth = 350;\nconst maxRows = 1;\nconst minItemWidth = 150;\nconst rowGap = 16;\n\nexport default function FlexMaxRows() {\n  const {\n    containerWidth,\n    rowCount,\n    desiredItemCount,\n    containerRef,\n  } = useCalculateLayout({\n    columnGap,\n    maxItemWidth,\n    maxRows,\n    minItemWidth,\n    isFlex: true,\n  });\n\n  const [cards, setCards] = React.useState([]);\n  React.useEffect(() => {\n    if (desiredItemCount && cards.length < desiredItemCount) {\n      fetch(`/api/cards/?count=${desiredItemCount}`)\n        .then((response) => response.json())\n        .then(({ cards }) => setCards(cards));\n    }\n  }, [cards.length, desiredItemCount]);\n\n  const itemWidth = calculateItemWidthWithCount({\n    columnGap,\n    containerWidth,\n    itemCount: cards.length,\n    maxItemWidth,\n    rowCount,\n  });\n\n  return (\n    <Flex.Container\n      {...{ columnGap, rowGap }}\n      css={{ padding: 8, width: \"70%\" }}\n      ref={containerRef}\n    >\n      {cards.slice(0, desiredItemCount).map((card) => (\n        <Flex.Item\n          {...{ itemWidth, columnGap, rowGap }}\n          css={itemStyle}\n          key={card.id}\n        >\n          <CardContent {...card} {...{ itemWidth }} />\n        </Flex.Item>\n      ))}\n    </Flex.Container>\n  );\n}\n"],"sourceRoot":""}